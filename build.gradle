/*
 * Copyright (c) 2008-2016 Haulmont. All rights reserved.
 * Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.
 */

buildscript {
    ext.cubaVersion = '6.6-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion

    repositories {
        mavenLocal()
        maven {
            url 'http://repository.haulmont.com:8587/nexus/content/groups/work'
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

configurations {
    bom
}
dependencies {
    bom("com.haulmont.cuba:cuba-global:$cubaVersion")
}

def globalModule = project(':bpm-global')
def coreModule = project(':bpm-core')
def guiModule = project(':bpm-gui')
def webModule = project(':bpm-web')

def postgres = 'org.postgresql:postgresql:9.4-1201-jdbc41'
def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'

apply(plugin: 'idea')
apply(plugin: 'cuba')

bom.load file('modules/global/src/com/haulmont/bpm/bom.properties')

cuba {
    artifact {
        group = 'com.haulmont.bpm'
        version = project.cubaVersion.replace('-SNAPSHOT', '')
        isSnapshot = project.cubaVersion.endsWith('-SNAPSHOT')
    }

    ide {
        vcs = 'Git'
        copyright = '''Copyright (c) 2008-$today.year Haulmont. All rights reserved.
Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.'''
    }
}

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')

    dependencies {
        testCompile(bom['junit:junit'])
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    jar {
        manifest {
            attributes("Implementation-Version": cubaVersion)
        }
    }

    javadoc {
        // move to plugin ?
        options.addStringOption("sourcepath", "")
    }
}

configure(globalModule) {
    dependencies {
        compile("com.haulmont.cuba:cuba-global:$cubaVersion")
    }

    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cubaVersion)
        }
    }
}

configure(coreModule) {
    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(postgres)
        testRuntime(postgres)

        compile("com.haulmont.cuba:cuba-core:$cubaVersion")

        compile(bom['org.activiti:activiti-engine']) {
            exclude group: 'org.springframework', module: 'spring-beans'
            exclude group: 'org.springframework', module: 'spring-core'
            exclude group: 'org.springframework', module: 'spring-context'
            exclude group: 'org.springframework', module: 'spring-jdbc'
            exclude group: 'org.springframework', module: 'spring-tx'
        }

        compile(bom['org.activiti:activiti-spring']) {
            exclude group: 'org.springframework', module: 'spring-beans'
            exclude group: 'org.springframework', module: 'spring-core'
            exclude group: 'org.springframework', module: 'spring-context'
            exclude group: 'org.springframework', module: 'spring-jdbc'
            exclude group: 'org.springframework', module: 'spring-orm'
            exclude group: 'org.springframework', module: 'spring-tx'
        }

        compile(bom['org.activiti:activiti-json-converter'])

        testCompile("com.haulmont.cuba:cuba-core-tests:$cubaVersion")
        dbscripts("com.haulmont.cuba:cuba-core:$cubaVersion:db@zip")
    }

    dbScriptsArchive {
        exclude '10-cuba/**'
    }

    assembleDbScripts {
        moduleAlias = '20-bpm'
    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'bpm-core'
        appJars('cuba-core', 'cuba-global', 
                'bpm-global', 'bpm-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'bpm'
        dbUser = 'root'
        dbPassword = 'root'
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'bpm'
        dbUser = 'root'
        dbPassword = 'root'
    }

    task createTestDb(dependsOn: assembleDbScripts, description: 'Creates test database', type: CubaDbCreation) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'bpm_test'
        dbUser = 'root'
        dbPassword = 'root'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        compile("com.haulmont.cuba:cuba-gui:$cubaVersion")
        compile("com.haulmont.cuba:cuba-client:$cubaVersion")

        compile(bom['com.fasterxml.jackson.core:jackson-databind'])
        compile(bom['org.codehaus.jackson:jackson-mapper-asl'])
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/bpm/**"
        into "$cuba.tomcat.dir/conf/bpm"
    }
}

configure(webModule) {
    configurations {
        modeler
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(globalModule)
        compile(guiModule)
        compile("com.haulmont.cuba:cuba-web:$cubaVersion")
        webcontent("com.haulmont.cuba:cuba-web:$cubaVersion:web@zip")
        webcontent("com.haulmont.cuba:cuba-web-toolkit:$cubaVersion:web@zip")

        modeler(bom['com.haulmont.bpm:cuba-modeler'] + ':web@zip')
    }

    task repackWebcontent(description: 'Repack webcontent') {
        doLast {
            def cubaModelerFile = configurations.modeler.files.find { dep ->
                dep.name.startsWith("cuba-modeler")
            }
            if (cubaModelerFile) {
                copy {
                    from zipTree(cubaModelerFile.absolutePath)
                    into "$webModule.buildDir/web"
                }
            }
        }
    }

    task webArchive(dependsOn: repackWebcontent, type: Zip) {
        from file("$webModule.buildDir/web")
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/bpm/**"
        into "$cuba.tomcat.dir/conf/bpm"
    }
    
    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'bpm'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, '/conf/bpm')
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'bpm'
        appJars('cuba-web', 'cuba-gui', 'cuba-client', 'cuba-global', 
                'bpm-global', 'bpm-gui', 'bpm-web')
    }
}

task undeploy(type: Delete, dependsOn: ':bpm-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/bpm-core")
    delete("$cuba.tomcat.dir/webapps/app")
}

task restart(dependsOn: ['stop', ':bpm-core:deploy', ':bpm-web:deploy'],
             description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
        start.execute()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}